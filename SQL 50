
# Leetcode-SQL 50


Q1. Recyclable and Low Fat Products
  
     SELECT product_id
     FROM products
     WHERE low_fats = 'Y' AND recyclable = 'Y';

-----
Q2. Find Customer Referee

    SELECT name
    FROM Customer 
    WHERE referee_id != 2 OR referee_id IS NULL;

-----
Q3. Big Countries

    SELECT 
        name, 
        population, 
        area
    FROM World
    WHERE 
        population >= 25000000 
        OR area >= 3000000;

-----
Q4. Article Views I
 
    SELECT DISTINCT author_id as id
    FROM views
    WHERE 
        author_id = viewer_id
    ORDER BY author_id ASC;

-----
Q5. Invalid Tweets
  
    SELECT tweet_id
    FROM tweets
    WHERE LENGTH(content) > 15;

-----
Q6. Replace Employee ID With The Unique Identifier

    SELECT 
        e1.unique_id, e.name
    FROM Employees e
    LEFT JOIN EmployeeUNI e1
    ON 
        e.id = e1.id;

-----
Q7. Product Sales Analysis I

    SELECT p.product_name, s.year, s.price
    FROM sales s
    JOIN Product p
    ON s.product_id = p.product_id;

-----
Q8. Customer Who Visited but Did Not Make Any Transactions

    SELECT
        customer_id , count(visit_id) as count_no_trans 
    FROM Visits
    WHERE
        visit_id NOT IN (SELECT visit_id FROM Transactions)
    GROUP BY customer_id;

-----
Q9. Rising Temperature

    SELECT w1.id
    FROM Weather w1
    JOIN Weather w2
        ON w1.recordDate = DATE_ADD(w2.recordDate, INTERVAL 1 DAY)
    WHERE w1.temperature > w2.temperature;

-----
Q10. Average Time of Process per Machine

    SELECT 
        a1.machine_id,
        ROUND(AVG(a2.timestamp - a1.timestamp),3) AS processing_time
    FROM Activity a1
    JOIN Activity a2
    ON a1.machine_id = a2.machine_id 
        AND a1.process_id = a2.process_id
        AND a1.activity_type = "start" 
        AND a2.activity_type = "end"
    GROUP BY 
        a1.machine_id;

-----
Q11. Employee Bonus

    SELECT e.name, b.bonus
    FROM Employee e
    LEFT JOIN Bonus b
    ON e.empId = b.empId
    WHERE 
        b.bonus < 1000 OR b.bonus IS NULL;

-----
Q12. Employee Bonus

    SELECT 
        s.student_id, 
        s.student_name,
        su.subject_name,
        COUNT(e.subject_name) AS attended_exams
    FROM students s
    CROSS JOIN subjects su
    LEFT JOIN Examinations e
        ON e.student_id = s.student_id 
        AND su.subject_name = e.subject_name
    GROUP BY 
        su.subject_name, s.student_id,s.student_name
    ORDER BY 
        s.student_id, su.subject_name;

-----
Q13. Students and Examinations

    SELECT 
        s.student_id, 
        s.student_name,
        su.subject_name,
        COUNT(e.subject_name) AS attended_exams
    FROM students s
    CROSS JOIN subjects su
    LEFT JOIN Examinations e
        ON e.student_id = s.student_id 
        AND su.subject_name = e.subject_name
    GROUP BY 
        su.subject_name, s.student_id,s.student_name
    ORDER BY 
        s.student_id, su.subject_name;

-----
Q14. Managers with at Least 5 Direct Reports

    SELECT a.name 
    FROM Employee a 
    JOIN Employee b ON a.id = b.managerId 
    GROUP BY b.managerId 
    HAVING COUNT(*) >= 5

-----
Q15. Confirmation Rate

    SELECT s.user_id, 
      ROUND(AVG(IF(c.action='confirmed',1,0)),2) as confirmation_rate 
    FROM Signups s
    LEFT JOIN Confirmations c using (user_id)
    GROUP BY s.user_id

-----













